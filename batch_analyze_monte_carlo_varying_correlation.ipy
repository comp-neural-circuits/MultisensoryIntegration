#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Adjusted graphs from Jan Kirchner to simplify repeating graphs for manuscript
By JaeAnn Dwulet
"""
#%%
# import sys
# sys.path.append('/Users/dwuletj/Documents/GitHub_Gjorgjieva/Multimodal/')
# print(sys.path)

import numpy , os , matplotlib , random, pathlib, re
from scipy import stats
import pylab as plt
import matplotlib.cm as cm

import tools.biased_weights
#reload(tools.biased_weights)
from tools.biased_weights import biased_weights
from mpl_toolkits.axes_grid1 import make_axes_locatable

matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['ps.fonttype'] = 42

# defining things for the figures
SMALL_SIZE = 12
MEDIUM_SIZE = 14.
BIGGER_SIZE = 16

plt.rc('font',  size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes',  titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes',  labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick',  labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick',  labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend',  fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure',  titlesize=BIGGER_SIZE)  # fontsize of the figure title

#%%
N = 50
V1template = biased_weights(N, [0 , 0], 1, 4)
S1template = biased_weights(N, [0 , 0], 1, 4)

%matplotlib inline
accSTATSList = []

pathtodata = pathlib.Path('simulations/monte_carlo_500000tp2')

for foldername in os.listdir(pathtodata):
    if foldername != '.DS_Store':
        for filename in os.listdir(pathtodata / foldername):
            if filename.endswith(".pickle"): #  and (numpy.random.rand() < 0.05)
                print(pathtodata / foldername / filename)
                time_vec_list, W_vec_v1, W_vec_s1 , prms , mats , vec_v1 , vec_s1 , vec_rl = numpy.load(os.path.join(os.path.join(pathtodata, foldername) , filename) , allow_pickle=True)

                cMat = numpy.corrcoef(mats['W_s1'].ravel() , mats['W_v1'].ravel()) #correlation between s1 and v1 - calculate alignment
                cMatV1 = numpy.corrcoef(mats['W_v1'].ravel() , V1template.ravel()) #correlation between v1 and perfect template - calculate topography
                cMatS1 = numpy.corrcoef(mats['W_s1'].ravel() , S1template.ravel()) #correlation between s1 and perfect template - calculate topography
                
                bimodal = ((mats['W_s1'] > 0.5).sum(axis=1) > 0) * ((mats['W_v1'] > 0.5).sum(axis=1) > 0)
                accSTATSList.append((prms['corr_thres'] , prms['spatio_temp_corr'] , cMat[0,1] , cMatV1[0,1] , cMatS1[0,1], bimodal.mean(), prms['bias_s1'])) #, mats['W_v1'] , mats['W_s1']) )

accSTATS = numpy.array(accSTATSList)
#accSTATS = numpy.nan_to_num(accSTATS , nan = 1)
numpy.savetxt('outputMC.csv', accSTATS, delimiter=',', fmt='%.2f')

#%%
meanRate = 0.123
meanVar = 0.107
x_theory = 0.5
y_theory = (x_theory - meanRate)

initBiasMat = biased_weights(prms['N_v1'], prms['W_initial_v1'], prms['bias_v1'], prms['spread_v1'])
initCMat = numpy.corrcoef(initBiasMat.ravel() , V1template.ravel())
initScore = initCMat[0,1]


#%% ending template for comparing RF
%matplotlib inline
plt.figure()
plt.imshow(V1template, cm.Greys , vmin = 0.0 , vmax = 1.0)
plt.savefig('raw_out/template_V1.pdf', bbox_inches='tight')

#%% initial weight matrix - same for both V1 and S1
plt.figure()
plt.imshow(initBiasMat, cm.Greys , vmin = 0.0 , vmax = 1.0)
plt.savefig('raw_out/initial_V1.pdf', bbox_inches='tight')


#%% create bimodal vs correlation graph fig. 3G
useID = ~numpy.isnan(numpy.array(accSTATS[: , 5], dtype=float))
bin_means, bin_edges, binnumber = stats.binned_statistic(numpy.array(accSTATS[useID,1], dtype=float) ,
                                                     numpy.array(accSTATS[useID,5], dtype=float) ,
                                                            'median', bins=10 )
plt.figure(figsize=(4,4))
sc = plt.scatter(accSTATS[:,1] , accSTATS[: , 5], c='g')
plt.plot(bin_edges[:-1] + numpy.diff(bin_edges)[0]/2 , bin_means , c='k')
plt.plot([y_theory , y_theory] , [0 , 1], c='k')

plt.xlim([0 , 1])
plt.xticks([0.0 , 0.5 , 1.0])
plt.ylim([0.0 , 1.0])
plt.yticks([0. , 0.5 , 1.0])
plt.ylabel('fraction bimodal')
plt.xlabel('V1 S1 correlation')
plt.savefig('raw_out/fraction_bimodal.pdf', bbox_inches='tight')

#%% creat topgraphy graph
useID = ~numpy.isnan(numpy.array(accSTATS[: , 3], dtype=float))
bin_means, bin_edges, binnumber = stats.binned_statistic(numpy.array(accSTATS[useID,1], dtype=float) ,
                                                     numpy.array(accSTATS[useID,3], dtype=float) ,
                                                            'mean', bins=10 )
plt.figure(figsize=(4,4))
allMat = numpy.array([numpy.concatenate((accSTATS[:,1] ,accSTATS[:,1] )) , 
                      numpy.concatenate((accSTATS[:,3] ,accSTATS[:,4] )) , 
                      numpy.concatenate((numpy.zeros(accSTATS.shape[0]) ,numpy.ones(accSTATS.shape[0]) ))])
numpy.transpose(numpy.random.shuffle(numpy.transpose(allMat)))
sc = plt.scatter(allMat[0,:] , allMat[1,:] , c='Grey')
plt.plot(bin_edges[:-1]+ numpy.diff(bin_edges)[0]/2 , bin_means , c='k')
plt.plot([0 , 1] , [initScore , initScore])
plt.xlim([0 , 1])
plt.xticks([0.0 , 0.5 , 1.0])
plt.ylim([-0.25 , 1.0])
plt.yticks([0. , 0.5 , 1.0])
plt.ylabel('Topography')
plt.xlabel('V1 S1 correlation')
plt.savefig('raw_out/topography_vs_correlation.pdf', bbox_inches='tight')


#%% Alignment vs correlation graph
useID = ~numpy.isnan(numpy.array(accSTATS[: , 2], dtype=float))
bin_means, bin_edges, binnumber = stats.binned_statistic(numpy.array(accSTATS[useID,1], dtype=float) ,
                                                     numpy.array(accSTATS[useID,2], dtype=float) ,
                                                            'median', bins=10 )
plt.figure(figsize=(4,4))
sc = plt.scatter(accSTATS[:,1] , accSTATS[: , 2], c='Grey')
plt.plot(bin_edges[:-1] + numpy.diff(bin_edges)[0]/2 , bin_means , c='k')
plt.xlim([0 , 1])
plt.xticks([0.0 , 1.0])
plt.ylim([-1 , 1.0])
plt.yticks([-1 ,  1.0])
plt.ylabel('Alignment')
plt.xlabel('V1 S1 correlation')
plt.savefig('raw_out/alignment_vs_correlation.pdf', bbox_inches='tight')

# %%
